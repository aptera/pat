// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TotallyNotRobots.Movies.Api.Integration.Tests.ApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using TotallyNotRobots.Movies;
    using TotallyNotRobots.Movies.Api;
    using TotallyNotRobots.Movies.Api.Integration;
    using TotallyNotRobots.Movies.Api.Integration.Tests;

    /// <summary>
    /// Extension methods for Reviews.
    /// </summary>
    public static partial class ReviewsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movieID'>
            /// </param>
            public static IList<Review> GetReviews(this IReviews operations, int movieID)
            {
                return operations.GetReviewsAsync(movieID).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movieID'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Review>> GetReviewsAsync(this IReviews operations, int movieID, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReviewsWithHttpMessagesAsync(movieID, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movieID'>
            /// </param>
            /// <param name='newReview'>
            /// </param>
            public static Review Post(this IReviews operations, int movieID, Review newReview)
            {
                return operations.PostAsync(movieID, newReview).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movieID'>
            /// </param>
            /// <param name='newReview'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Review> PostAsync(this IReviews operations, int movieID, Review newReview, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(movieID, newReview, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
