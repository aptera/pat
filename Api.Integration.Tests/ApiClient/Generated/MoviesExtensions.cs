// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace TotallyNotRobots.Movies.Api.Integration.Tests.ApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using TotallyNotRobots.Movies;
    using TotallyNotRobots.Movies.Api;
    using TotallyNotRobots.Movies.Api.Integration;
    using TotallyNotRobots.Movies.Api.Integration.Tests;

    /// <summary>
    /// Extension methods for Movies.
    /// </summary>
    public static partial class MoviesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Movie> GetMovies(this IMovies operations)
            {
                return operations.GetMoviesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Movie>> GetMoviesAsync(this IMovies operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMoviesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movie'>
            /// </param>
            public static Movie PostMovie(this IMovies operations, Movie movie)
            {
                return operations.PostMovieAsync(movie).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='movie'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Movie> PostMovieAsync(this IMovies operations, Movie movie, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostMovieWithHttpMessagesAsync(movie, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Movie GetMovie(this IMovies operations, int id)
            {
                return operations.GetMovieAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Movie> GetMovieAsync(this IMovies operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMovieWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='movie'>
            /// </param>
            public static void PutMovie(this IMovies operations, int id, Movie movie)
            {
                operations.PutMovieAsync(id, movie).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='movie'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutMovieAsync(this IMovies operations, int id, Movie movie, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutMovieWithHttpMessagesAsync(id, movie, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Movie DeleteMovie(this IMovies operations, int id)
            {
                return operations.DeleteMovieAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Movie> DeleteMovieAsync(this IMovies operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteMovieWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
